#!/usr/bin/python

import commands, subprocess, os, sys, re

git_config_section = "deploy"

def get_worktree_directory():
	return os.path.abspath(os.path.join(os.getcwd(),'..'))

def print_if_present(s):
	o = s.strip()
	if (len(o) > 0):
		print(o)

def run_git_cmd(cmd):
	pr = subprocess.Popen("git --work-tree=%s %s" % (get_worktree_directory(),cmd), shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
	return pr.communicate()

def git_config_value(name, default=None):
	(out,error) = run_git_cmd("config --get %s.%s" % (git_config_section,name))
	out = out.strip()
	if len(out) == 0:
		return default
	if out.lower() == "true":
		return True
	if out.lower() == "false":
		return False
	return out 

def run_deploy_script(working_directory,script_filename):
	pr = subprocess.Popen(os.path.join(working_directory,script_filename), cwd = working_directory, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
	return pr.communicate()

def run_deploy(oldrev, newrev, refname):
	script_to_run = git_config_value("scripttorun",None)

	print("Resetting tree to pushed version (%s)." % (newrev))

	(out, error) = run_git_cmd("reset --hard %s" % (newrev))
	print_if_present(error)
	print_if_present(out)

	if script_to_run != None:
		print("Running deployment script.")
		(out, error) = run_deploy_script(get_worktree_directory(),script_to_run)
		print_if_present(error)
		print_if_present(out)

if __name__ == '__main__':
	(oldrev, newrev, refname) = sys.stdin.readlines()[0].split()
	refpattern = git_config_value("refpattern","refs/heads/master")
	if re.match(refpattern, refname):
		run_deploy(oldrev,newrev,refname)
